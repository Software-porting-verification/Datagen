#! /usr/bin/env python3

####################################################
#
#
# filter raw execve data and generate perf exe info
#
# Author: Mao Yifu, maoif@ios.ac.cn
#
#
####################################################

import os
import sys
import argparse
import yaml
import trace_datum
import socket
from trace_datum import *


g_script_name = 'perf-filter'
g_package: str = ''
g_version: str = ''
g_true_exes = []


def filter_result(datum: TraceDatum):
    callee = datum.file_path

    if not g_true_exes == []:
        if callee not in g_true_exes:
            return False

    filter_prefixes = ['/bin/', '/usr/', '/sbin/', '/snap/', '/opt/', '/tmp/', '/etc/', '/var/']
    for p in filter_prefixes:
       if callee.startswith(p):
            return False

    filter_suffixes = ['./conftest', './configure', '.build.command', '/bin/sh', '/.', '.sh'
                       'config.guess']
    for p in filter_suffixes:
       if callee.endswith(p):
            return False

    filter_infixes = ['./exec.cmd']
    for p in filter_infixes:
       if p in callee:
            return False

    return datum.check_fields()


def to_absolute_path(data: list[TraceDatum]):
    for d in data:
        exe = d.file_path
        # caller's working dir
        pwd = d.working_dir

        # convert to absolute path
        if not exe.startswith('/'):
            exe = pwd + '/' + exe

        d.file_path = exe


def analyze(data: list[TraceDatum]):
    to_absolute_path(data)
    filtered = filter(lambda d: filter_result(d), data)
    perf = list(set([d.file_path for d in filtered]))

    return perf


def check_file(f):
    if not os.path.exists(f):
        print(f'{f} not found')
        exit(-1)
    elif not os.path.isfile(f):
        print(f'{f} is not a file')

###
### start of program
###

parser = argparse.ArgumentParser(
    prog=g_script_name,
    description='Analyze bpftrace data and generate dataset.')
parser.add_argument('rawfile', help='raw trace files in yaml format')
parser.add_argument('--refinement', help='refinement data generated by perf-wrapper')

args = parser.parse_args()

rawfile = args.rawfile
refinement = args.refinement

check_file(rawfile)
if refinement is not None:
    check_file(refinement)
    with open(refinement, 'r') as f:
        print(f'loading refinement: {refinement}')
        g_true_exes = yaml.load(f, Loader=yaml.Loader)
        print(f'loading refinement: {refinement} done')

with open(rawfile, 'r') as f:
    print(f'loading {rawfile}')
    data = yaml.load(f, Loader=yaml.Loader)
    print(f'loading {rawfile} done')
    g_package = data['package']
    g_version = data['version']
    perf = analyze(data['data'])
    
    perf_path = f'{g_package}-{g_version}-perf'
    with open(perf_path, 'w') as f_perf:
        yaml.dump(perf, f_perf)
        print(f'{rawfile} perf dataset at {perf_path}')
